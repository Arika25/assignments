/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require('fs');
  
  const app = express();
  
  // app.use(bodyParser.json());
  // function read(filename) {
  //   fs.readFile(filename, 'utf8', function(err, data) {
      
  //     return(data)
  //   })
  // }

  function read(filename) {
      const data = fs.readFileSync(filename, 'utf8');
      return JSON.parse(data);
  }

  function write(filename, data) {
    fs.writeFileSync(filename, JSON.stringify(data, null, 2));
  }

  // var todos =read('todos.json')

app.use(express.json());

app.get('/todos', function(req, res) {
  var todos =read('todos.json')
  res.status(200).json(
        todos
    )
})

app.get('/todos/:id', function(req, res) {
  const id = req.params.id;
  ans = null
  var todos =read('todos.json');
  for (i=0; i<todos.length;i++) {
    if(todos[i].id == id) {
    ans= todos[i];
  }
  }
  if(ans) {
    res.status(200).json(
      ans
  )
 } else {
    res.status(404).json({
        msg:"Not Found"
    })
  }  
})

app.post('/todos', function(req,res) {
    const id = Math.floor(Math.random() * 1000000);
    const title= req.body.title;
    const completed= req.body.completed;
    const description= req.body.description;
    var todos =read('todos.json')
    todos.push({
      id: id,
      title: title,
      completed: completed,
      description: description
    }
    )
    write('todos.json', todos)
    res.status(201).json({
      id: id,
      title: title,
      completed: completed,
      description: description
    })
})

app.put('/todos/:id', function(req, res) {
  const id = req.params.id;
  var todos =read('todos.json')
    if(todosFound(id,todos)) {
    for (i=0; i<todos.length; i++) {
        if(todos[i].id==id) {
            todos[i].title= req.body.title;
            todos[i].completed= req.body.completed;
            todos[i].description= req.body.description;
        }
    }
    write('todos.json', todos)
    res.status(200).json({})
} else {
    res.status(404).json({
        msg:"Not Found"
    })
}

})

app.delete('/todos/:id', function(req,res) {
  const id = req.params.id;
    const newtodos= [];
    var todos =read('todos.json')
    if(todosFound(id,todos)) {
    for (i=0; i<todos.length; i++) {
      if(todos[i].id!=id) {
            newtodos.push({
              id:todos[i].id,
                title: todos[i].title,
                completed: todos[i].completed,
                description: todos[i].description
            }) 
    }}
    todos = newtodos;
    write('todos.json', todos)
    res.status(200).json({msg:"done"})
} else {
    res.status(404).json({
        msg:"Not found"
    })
}
})

function todosFound(id,todos) {
    let todosfound= false;
    for(i=0; i<todos.length; i++) {
        if(todos[i].id==id) {
            todosfound = true;
        }
    }
    return todosfound

}
  
  module.exports = app;

//  app.listen(3000)